       #--------------------------------------------------------#
       # delete all tags and special chars in surface forms     #
       #--------------------------------------------------------#
       define Cleanup1  [["@EP"|"@EP@"|"@PHONPROC@"|"@PHONPROCCMPNOUN@"|"@1SG.S"|"@2S"|"@3m.S"|"@3n.m.S"|"@1PL.S"|"@1SG.A"|"@2A"|"@3m.A"|"@3n.m.A"|"@1PL.A"|"@3n.m.O"|"@NPOSS"|"@AGT.CAUS@"|"@MP@"|"@I@"|"@NI@"|"@NVowel@"|"@VPERS@"] -> ""];
       define Cleanup2 ["" <- ["@EP"|"@EP@"|"@PHONPROC@"|"@PHONPROCCMPNOUN@"|"@1SG.S"|"@2S"|"@3m.S"|"@3n.m.S"|"@1PL.S"|"@1SG.A"|"@2A"|"@3m.A"|"@3n.m.A"|"@1PL.A"|"@3n.m.O"|"@NPOSS"|"@AGT.CAUS@"|"@MP@"|"@I@"|"@NI@"|"@NVowel@"|"@VPERS@"]];
       define Cleanup [Cleanup2];

      source ortography.foma 

      ##########################
      #                        #
      #          Verbs         #
      #                        #
      ##########################
      source v-p-1.foma
      source v-p-2.foma

      define Pref [[P=1 P=2] | ([P=1])] ;

      ##########################
      #                        #
      #   'Empty Morph' is a   #
      #   sort of epenthesis   #
      #                        #
      ##########################

      define AEpenthesisRule1 [ ["@EP@"{a}"@EP"] => t _ v ]; # kentavaetantsi / =kent -a -vae -t -antsi 
      define AEpenthesisRule2 [ ["@EP@"{a}"@EP"] => r _ y ]; 

      define AEpenthesisRule3 [ ["@EP@"{a}"@EP"] => s _ [r|v|k] ]; # pinkatsari ??? , i-kis-a-kamari-t-an-ak-a
      define AEpenthesisRule4 [ ["@EP@"{a}"@EP"] => k _ m ]; # notoncamento
      define AEpenthesisRule5 [ ["@EP@"{a}"@EP"] => t _ m ]; # itotamento
      define AEpenthesisRule6 [ ["@EP@"{a}"@EP"] => k _ n ]; # notyoonkantsi
      define AEpenthesisRule7 [ ["@EP@"{a}"@EP"] => k _ v ]; # pokabaetantsi
      define AEpenthesisRule8 [ ["@EP@"{a}"@EP"] => p _ v ]; # Pabaetantsi
      define AEpenthesisRule9 [ ["@EP@"{a}"@EP"] => v _ [v|h|{ch}|{ts}] ]; # Ob-a-bae-t-antsi, i-=tiyerov-a-hei-t-ati-ya 
      define AEpenthesisRule10 [ ["@EP@"{a}"@EP"] => r _ [v|p] ]; # irabaetantsi, n-=ir-a-piro-t-i-ro 
      define AEpenthesisRule11 [ ["@EP@"{a}"@EP"] => m _ [v|n] ]; # timabaetantsi, quem-a-nen-t-aantsi
      define AEpenthesisRule12 [ ["@EP@"{a}"@EP"] => k _ [h|y|r|p|t|a] ]; # i-vitsik-a-jee-tz-i-ri, betsik-a-ye-t-atsi-ri, o-tsimank-a-re, no-shitik-a-pero-t-ati-i-ro, ajirik-a-tsomi-t-ak-i-mpi-ri? , n=aabak-a-ati-ye-mpa  
      define AEpenthesisRule13 [ ["@EP@"{a}"@EP"] => p _ [a|y|h] ]; # i-kant-ap-a-ak-e, i-tsop-a-ye-t-ak-e 
      define AEpenthesisRule14 [ ["@EP@"{a}"@EP"] => t _ [h|m|p|k|y] ]; # y-ant-a-jeí-t-ak-e, kant-a-mironta-ki-t-acha-ri, o-kant-a-pankaina-aty-a, o-kant-a-kintsi-t-ap-ak-a, o-=mat-a-yi-tz-i-ri-ni 
      define AEpenthesisRule15 [ ["@EP@"{a}"@EP"] => m _ [h|a|e|y] ]; # tim-a-jeí-atsi-ri, o-bam-a-ak-e, am-a-enka-ri, p-am-a-ye-t-ak-e-ro 
      define AEpenthesisRule16 [ ["@EP@"{a}"@EP"] => y _ [a|y|v|m] ]; # i-vary-a-ant-tz-i, a-ny-a-ye-tz-i-ri, katziy-a-vint-a-ri-ri, i-piy-a-macheve-t-an-ah-a 
      define AEpenthesisRule17 [ ["@EP@"{a}"@EP"] => n _ [v|a|t] ]; # i-kin-a-bae-t-i,  I-kemisan-t-a-jei-t-i-ri
                                                                       # kenakenatinkari / =kenaken -a -tinkari+m. / [=ken -a =ken] -a -tinkari+m. / [=to.walk -ep =to.walk] -ep -adj / ES: 'callejero' 
                                                                       # kenakenatinkaro / =kenaken -a -tinkaro+n.m. / [=ken -a =ken] -a -tinkari+n.m. / [=to.walk -ep =to.walk] -ep -adj / ES: 'callejera' 
      define AEpenthesisRule18 [ ["@EP@"{a}"@EP"] => h _ [t|m] ]; # no-m-pirih-a-tsempeki-t-ak-e, sokih-a-mento-tsi 

      define TEpenthesisRule1 [ ["@EP@"{t}"@EP"] => i _ i ]; 
      define TEpenthesisRule2 [ ["@EP@"{t}"@EP"] => a _ a ]; 
      define TEpenthesisRule3 [ ["@EP@"{t}"@EP"] => e _ a ]; 
      define TEpenthesisRule4 [ ["@EP@"{t}"@EP"] => a _ e ]; 
      define TEpenthesisRule5 [ ["@EP@"{t}"@EP"] => o _ a ]; # Amitakotaantsi
      define TEpenthesisRule6 [ ["@EP@"{t}"@EP"] => i _ [a|e|y] ]; # Antabaitantsi, i-ñ-a-ashi-t-ya-ro-kia
      define TEpenthesisRule7 [ ["@EP@"{t}"@EP"] => e _ i ]; # Raniwaeti
      define TEpenthesisRule8 [ ["@EP@"{t}"@EP"] => o _ e ]; # aminakotero
      define TEpenthesisRule9 [ ["@EP@"{t}"@EP"] => a _ i ]; # o-kametsa-t-i
      define TEpenthesisRule10 [ ["@EP@"{t}"@EP"] => e _ [y|e] ]; # no-ñatsa-bae-t-ya, i-ñaashirink-a-jee-t-e-ri-ne
      define TEpenthesisRule11 [ ["@EP@"{t}"@EP"] => n _ [a|e|i|o|y] ]; # quemisan-t-atsi-ri, pi-n-quemisan-t-e-na-ji, i=shiron-t-yaa-ma  
      define TEpenthesisRule12 [ ["@EP@"{t}] => o _ ["@EP"[i|y]] ]; # i=cameetsa-t-asano-t-i, i-n=kis-ako-t-ya-ro 
      #define TEpenthesisRule12 [ ~[ [~[?* o] "@EP@t@EP" ?*] | [?* "@EP@t@EP" ~[ [i|y] ?*]] ] ];
      define TEpenthesisRule13 [ ["@EP@"{t}"@EP"] => y _ [a|e] ]; # i=mantsiy-t-apaent-e
									# This rule is not working for this entry: Ikinkishiriaka 
									# but for Ikinkishiritaka, for this reason we apply an optional rule

      define TZEpenthesisRule1 [ ["@EP@"{tz}"@EP"] => e _ i ]; # ^EP IRREALIS ; 
      define TZEpenthesisRule2 [ ["@EP@"{tz}"@EP"] => a _ i ]; 
      define TZEpenthesisRule3 [ ["@EP@"{tz}"@EP"] => n _ i ]; 
      define TZEpenthesisRule4 [ t"@EP" (->) {tz}"@EP" || n _ i ]; # kant@EPi -> ocantzi
      define TZEpenthesisRule5 [ ["@EP@"{tz}"@EP"] => i _ i ]; 
      define TZEpenthesisRule6 [ t"@EP" (->) {tz}"@EP" || i _ i ]; # p^atziri(tz)-imo(t)~an-ac—e-ri
      define TZEpenthesisRule7 [ ["@EP@"{tz}"@EP"] => o _ i ]; 
      define TZEpenthesisRule8 [ t"@EP" (->) {tz}"@EP" || o _ i ]; # i-tsink-ako-tz-imaint-a-ro

      define TSEpenthesisRule1 [ ["@EP@"{ts}"@EP"] => i _ i ];  # ts allophone to tz
                                                                 # n-amatawits-i-mi
      define TSEpenthesisRule2 [ ["@EP@"{ts}"@EP"] => o _ [a|i] ];  # potso-ts-aantsi, ir=apato-ts-imai-t-ya-ri

      
      define CleanUpEpenthesisRule6 [ "" (->) "@EP" || i _ {antsi} ]; # kinkishiriantsi
      
      define EpEpRestr1 [ ["@EP@"[{a}|{ts}{tz}]] => ~["@EP@"[{a}|{ts}{tz}]] _ ];
      
       define Epenthesis [ 
#AEpenthesisRule1 .o. 
#AEpenthesisRule2 .o. 
#AEpenthesisRule3 .o. 
TZEpenthesisRule4 .o. 
TZEpenthesisRule6 .o. 
TZEpenthesisRule8 
];
#      define Epenthesis [ AEpenthesisRule1 .o. AEpenthesisRule2 .o. AEpenthesisRule3 .o. AEpenthesisRule4 .o. AEpenthesisRule5 .o. AEpenthesisRule6 
#.o. AEpenthesisRule7 .o. AEpenthesisRule8 .o. AEpenthesisRule9 .o. AEpenthesisRule10 .o. AEpenthesisRule11 .o. AEpenthesisRule12 .o. AEpenthesisRule13 .o. AEpenthesisRule14 .o. AEpenthesisRule15 .o. AEpenthesisRule16 
#.o. AEpenthesisRule17 .o. AEpenthesisRule18 
#.o. TEpenthesisRule1 .o. TEpenthesisRule2 .o. TEpenthesisRule3 .o. TEpenthesisRule4 .o. TEpenthesisRule5 .o. TEpenthesisRule6 .o. TEpenthesisRule7 .o. TEpenthesisRule8 .o. TEpenthesisRule9 .o. TEpenthesisRule10 .o. TEpenthesisRule11 .o. TEpenthesisRule12 .o. TEpenthesisRule13 
#.o. TZEpenthesisRule1 .o. TZEpenthesisRule2 .o. TZEpenthesisRule3 .o. TZEpenthesisRule4 .o. TZEpenthesisRule5 .o. TZEpenthesisRule6 .o. TZEpenthesisRule7 .o. TZEpenthesisRule8 
#.o. TSEpenthesisRule1 .o. TSEpenthesisRule2 
#.o. CleanUpEpenthesisRule6 ];
      
      define VCausativeAgentiveRule [ v"@AGT.CAUS@"k (->) v"@AGT.CAUS@" || [{o}] _ [{a}] ]; 
      define CausativeAgentive [VCausativeAgentiveRule]; 

      ##########################
      #                        #
      #        Transitive      #
      #                        #
      ##########################
#       define TransSubj1 [ "[1SG.A+]" <- "[1SG.S+]" || _ ?* "[+1SG.O]"];
#       define TransSubj2 [ "[2SG.A+]" <- "[2SG.S+]" || _ ?* "[+2SG.O]"];
#       define TransSubj3 [ "[3SGm.A+]" <- "[3SGm.S+]" || _ ?* "[+3SGm.O]"];
#       define TransSubj4 [ "[3SGnm.A+]" <- "[3SGnm.S+]" || _ ?* "[+3SGnm.O]"];
#       define TransSubj5 [ "[1PL.A+]" <- "[1PL.S+]" || _ ?* "[+1PL.O]"];
#      define VerbRules TransSubj1 .o. TransSubj2 .o. TransSubj3 .o. TransSubj4 .o. TransSubj5 ;

#      source v-s-1.foma
#      source v-s-2.foma
#      source v-s-3.foma
#      source v-s-4.foma
#      source v-s-5.foma
#      source v-s-6.foma
#      source v-s-7.foma
      source verb.suffix.prq.script
      source verb.composition.prq.foma
      source verb.composition.len.prq.foma
      source verb.classifier.prq.foma
      source verb.transitions.prq.script

#      define S [ (V=S=1) (V=S=2) (V=S=3) (V=S=4) ]; #(V=S=3) (S=4) (S=5) (S=6) (S=7)] ;
      define Suff [S] ;

      ####################################
      #                                  #
      #   Subject / Agent ... Object     #
      #     Restricctions                #
      #                                  #
      ####################################
      # S .. is accepted
      
      # not accepting the incorrect combinations S .. O deprecated 
      #define TransSubjRestr1 [~$["@1SG.S"?*["@1SG.O"|"@2SG.O"|"@3m.O"|"@3n.m.O"|"@1PL.O"]]];
      #define TransSubjRestr2 [~$["@2S"?*["@1SG.O"|"@2SG.O"|"@3m.O"|"@3n.m.O"|"@1PL.O"]]];
      #define TransSubjRestr3 [~$["@3m.S"?*["@1SG.O"|"@2SG.O"|"@3m.O"|"@3n.m.O"|"@1PL.O"]]];
      #define TransSubjRestr4 [~$["@3n.m.S"?*["@1SG.O"|"@2SG.O"|"@3m.O"|"@3n.m.O"|"@1PL.O"]]];
      #define TransSubjRestr5 [~$["@1PL.S"?*["@1SG.O"|"@2SG.O"|"@3m.O"|"@3n.m.O"|"@1PL.O"]]];
     #define MINSUFFIX  [~$[ ?*"--"?* ] ]; 
      #define PrnSubject ["@1SG.S"|"@2S"|"@3m.S"|"@3n.m.S"|"@1PL.S"];
      #define PrnAgent ["@1SG.A"|"@2A"|"@3m.A"|"@3n.m.A"|"@1PL.A"];
      #define PrnObject ["@1SG.O"|"@2SG.O"|"@3m.O"|"@3n.m.O"|"@1PL.O"];
      #define TransAgentWithoutObject ~[[PrnAgent ?*] & [?* PrnObject]];
      #define TransSubjectWithObject ~[[PrnSubject ?*] & [?* PrnObject]];
     #define VerbFeatRestr [TransSubjRestr1 .o. TransSubjRestr2 .o. TransSubjRestr3 .o. TransSubjRestr4 .o. TransSubjRestr5] ;
      #define VerbFeatRestr [TransSubjRestr1 .o. TransSubjRestr2 .o. TransSubjRestr3 .o. TransSubjRestr4 .o. TransSubjRestr5 .o. TransAgentWithoutObject .o. TransSubjectWithObject] ;

      define MPRestr1 [ ["@MP@"] => {m} _ {p} ]; 
      define NVowelRestr1 [ ["@NVowel@"] => {n} _ [{p}|{py}|{t}|{ty}|{k}|{ky}|{s}|{sh}|{ch}|{ts}|{tz}|{h}|{m}|{n}|{ny}|{r}|{ry}|{v}|{y}] ]; ! n, p should be omitted ? 
      define PersPrefixRestr1 [ Cons => .#. ~[[{h}|{n}|{p}|{r}]"@VPERS@"] _ ];
      define PersPrefixRestr2 [ [{o}] => .#. ~[[{pi}]"@VPERS@"] _ ]; 
      define NORestr1 [ [{o}] => .#. ~[[{n}]"@AGT.CAUS@"] _ ]; # no examples available, but it causes a lot of overgeneration that's why it should be regulated  
      
      define VerbFeatRestr [ MPRestr1 .o. NVowelRestr1 .o. PersPrefixRestr1 .o. PersPrefixRestr2 .o. NORestr1 ] ; 

      source vroot.prq.foma
      source vroot.es.foma
      source n-vroot.prq.foma 
        define VRootPRQ [VRootPRQin|VRootESin|NounToVerbPRQin];

#      define Verb VerbFeatRestr .o. VerbRules .o. [ (Pref) [VRootPRQ] (Suff) ] .o. Epenthesis;

      ##########################
      #                        #
      #          Nouns         #
      #                        #
      ##########################
      source n-p-1.foma
      define NPref [(N=P=1)] ;

#      source n-s-1.foma
#      source n-s-2.foma
#      source n-s-3.foma
      source noun.suffix.prq.script
      source noun.transitions.prq.script

      define NSuff [ N ]; #(N=S=1) (N=S=2) (N=S=3)] ;

      ###################################
      #          Lenition Rules         #
      ###################################

      define PWLenitionRule1 [ "@PHONPROC@"p (->) "@PHONPROC@"v || [{o}] _ [{i}|{a}|{o}] ]; 
                                                                            # nopito (in our lexicon) -> no@PHONPROC@pito -> no@PHONPROC@vito -> novito 
                                                                            # nopochokine (in our lexicon) -> no@PHONPROC@pochokine -> no@PHONPROC@bochokine -> nobochokine 
      define PWLenitionRule2 [ "@PHONPROC@"p (->) "@PHONPROC@"v || [{i}] _ [{e}|{i}|{a}|{o}] ]; 
                                                                            # ipentaki (in our lexicon) -> i@PHONPROC@pentaki -> i@PHONPROC@ventaki -> iventaki 
                                                                            # ipanko (in our lexicon) -> i@PHONPROC@panko -> i@PHONPROC@vanko -> ivanko 
                                                                            # pipompooti (in our lexicon) -> pi@PHONPROC@pompooti -> pi@PHONPROC@vompooti -> pivompooti 
      define PWLenitionRule3 [ "@PHONPROC@"p (->) "@PHONPROC@"v || [{a}] _ [{i}|{o}] ]; 
                                                                            # apinkatsarite (in our lexicon) -> a@PHONPROC@pinkatsarite -> a@PHONPROC@vinkatsarite -> avinkatsarite 
                                                                            # COMPOUNDS vatsapori (in our lexicon) -> vatsa@PHONPROC@pori -> vatsa@PHONPROC@vori -> vatsavori
                                                                            # aporoni 
      define PWLenitionRule4 [ "@PHONPROC@"p (->) "@PHONPROC@"v || [{e}] _ [{i}|{o}|{a}] ]; 

      define KJLenitionRule1 [ "@PHONPROC@"k (->) "@PHONPROC@"y || _ [{o}|{a}|{e}|{i}] ]; 
                                                                            # optional rule: noyokani, ikentsike  
                                                                            # nokimini (in our lexicon) -> no@PHONPROC@kimini -> no@PHONPROC@yimini -> noyimini
      define KLenitionRule2 [ "@PHONPROC@"k (->) "@PHONPROC@" || [{o}] _ [{i}|{e}|{a}|{o}] ]; 
                                                                            # nokitzi (in our lexicon) -> no@PHONPROC@kitzi -> no@PHONPROC@itzi -> noitzi
                                                                            # nokanire (in our lexicon) -> no@PHONPROC@kanire -> no@PHONPROC@anire -> noanire
                                                                            # nokonta (in our lexicon) -> no@PHONPROC@onta -> no@PHONPROC@onta -> noonta 
                                                                            # okomaro (in our lexicon) -> o@PHONPROC@omaro -> o@PHONPROC@omaro -> oomaro-janiqui
                                                                            # oketsa (in our lexicon) -> o@PHONPROC@etsa -> o@PHONPROC@etsa -> o-etsa-re-ki
      define KLenitionRule3 [ "@PHONPROC@"k (->) "@PHONPROC@" || [{i}] _ [{i}] ]; ! not working.. why??? 
                                                                            # ikishi (in our lexicon) -> i@PHONPROC@kishi -> i@PHONPROC@ishi -> iishi 
                                                                            # ikitsoki (in our lexicon) -> i@PHONPROC@kitsoki -> i@PHONPROC@itsoki -> iitsoki 
      define KLenitionRule4 [ "@PHONPROC@"k (->) "@PHONPROC@" || [{p}] _ [{i}] ]; 
                                                                            # pkitsare (in our lexicon) -> p@PHONPROC@kitsare -> p@PHONPROC@itsare -> pitsare 
      define KLenitionRule5 [ "@PHONPROC@"k (->) "@PHONPROC@" || [{o}] _ [{i}] ]; ! oitsoki -> o=kitsoki 
      define KLenitionRule6 [ "@PHONPROC@"k (->) "@PHONPROC@" || [{a}] _ [{i}] ]; ! aitsoki -> a=kitsoki 

      define Lenition [ PWLenitionRule1 .o. PWLenitionRule2 .o. PWLenitionRule3 .o. PWLenitionRule4 
 .o. KJLenitionRule1 
 .o. KLenitionRule2 
 .o. KLenitionRule3 
 .o. KLenitionRule4 
 .o. KLenitionRule5 
 .o. KLenitionRule6 
];

      #########################################
      #          Vowel Deletion Rules         #
      #########################################
      # noirani (in our lexicon) -> no@PHONPROC@irani -> n@PHONPROC@irani -> nirani 
#      define VowelLossRule1 [ o"@PHONPROC@" -> "@PHONPROC@" || n _ [{i}|{o}|{a}] ]; 
#      define VowelLossRule2 [ i"@PHONPROC@" -> "@PHONPROC@" || p _ [{i}|{o}|{a}] ]; 
      define VowelLossRule3 [ i"@PHONPROC@" (->) "@PHONPROC@" || _ [{i}] ]; 
      
#      define VowelLoss [ VowelLossRule1 .o. VowelLossRule2 ];
      define VowelLoss [ VowelLossRule3 ];
      
      ####################################
      #                                  #
      #          Noun                    #
      #     Restricctions                #
      #                                  #
      ####################################
      define PossPlusInalRestr1 [~$["@PHONPROC@"?*"@NPOSS"]]; ! it is possible that this is a badly designed rule 
      
      define PossessiveRestr1 [ Cons => .#. ~[[{r}|{n}|{p}]"@PHONPROC@"] _  ];
      define PossessiveRestr2 [ Cons => .#. ~[{ir}"@PHONPROC@"] _  ];
      
      define PossessiveRestr3 [ Vowels => .#. ~[{no}"@PHONPROC@"] _  ]; ! noito ??? oitontsi ??? 
      define PossessiveRestr4 [ [{o}] => .#. ~[{pi}"@PHONPROC@"] _  ]; ! pio 
      
      define IRestr1 [ ["@I@"] => {i} _ ]; 
      define NIRestr1 [ ["@NI@"] => {ni} _ ]; 
      
      define NounFeatRestr [ PossPlusInalRestr1 .o. PossessiveRestr1 .o. PossessiveRestr2 .o. PossessiveRestr4 .o. IRestr1 .o. NIRestr1 ];
      
      source nroot.prq.foma
      source aroot.prq.foma
      source nroot.es.foma
      # Quechua loan words 
      source nroot.qu.foma
      source numeral.prq.foma

      # Compound nouns
      source noun.cmp.prq.foma
      define NRootCmpPRQ NRootCmpPRQin;

#      source nroot.es.freeling.00.foma
#      define NRootESFreeling00 NRootESFreelingin00 .o. UpperCase; 
#      source nroot.es.freeling.01.foma
#      define NRootESFreeling01 NRootESFreelingin01 .o. UpperCase; 
#      source nroot.es.freeling.02.foma
#      define NRootESFreeling02 NRootESFreelingin02 .o. UpperCase; 
#      source nroot.es.freeling.03.foma
#      define NRootESFreeling03 NRootESFreelingin03 .o. UpperCase; 
      
#      source pronoun.prq.foma
      define NRootFreeling [NRootESFreeling00|NRootESFreeling01|NRootESFreeling02|NRootESFreeling03];
      define NRootPRQ [NRootPRQin|ARootPRQin|NRootESin|NRootQUin|NumeralPRQin];
      ####################################
      #     Compound nouns               #
      ####################################
      # the lenition process is found at the root-root boundary in noun compounds 
      # vatsavori / 'vatsa-pori' / 'meat-muscle' 
      # caavovaniri~kaavovaniri / 'kaavo-kaniri' / ES: 'caña-yuca', EN: 'sugar.cane-yucca' 
      # camatoyaniri / '' 
      # tsireentsiyaniri / '' 
      define PWLenitionRuleCmpNoun1 [ "@PHONPROCCMPNOUN@"p (->) "@PHONPROCCMPNOUN@"v || [{a}] _ [{i}|{o}] ]; 
      define KWLenitionRuleCmpNoun2 [ "@PHONPROCCMPNOUN@"k (->) "@PHONPROCCMPNOUN@"v || [{o}] _ [{a}] ]; 
      define KYLenitionRuleCmpNoun3 [ "@PHONPROCCMPNOUN@"k (->) "@PHONPROCCMPNOUN@"y || [{o}|{i}] _ [{a}] ]; 
      
      define LenitionCmpNoun [ PWLenitionRuleCmpNoun1 .o. KWLenitionRuleCmpNoun2 .o. KYLenitionRuleCmpNoun3 ];  

      ############################
      #      Noun transducer     #
      ############################
      define Noun [ (NPref) [NRootPRQ] ("@PHONPROCCMPNOUN@"NRootCmpPRQ) (NSuff) ] .o. Lenition .o. VowelLoss .o. LenitionCmpNoun .o. NounFeatRestr ; #.o. VowelLoss ;
      
      ##########################
      #                        #
      #   Nominalized verb     #
      #                        #
      ##########################
      define NominalizedVerb [ (NPref) [VRootPRQ] ( [
                                                     [APPLINT DUR] 
                                                   | [APPL] # tseeyakotaantsi / =tsee -ako -t -aantsi / =to.lie -appl -ep -ing / ES: 'difamar'; EN: 'to.defame; to.slander'  
                                                   | [APPLBEN] 
                                                   | [APPLSEP] # aapitsataantsi / =a-apitsa-t-aantsi ES: 'sustracción', EN: 'rest'
                                                   | [DLMT] # i-tsipa-bintsa-ri-te  
                                                   | [RCP CAUSSOC] # nashitavakaantsi / =nashi -t -aV -ak -aantsi / =to.separate -ep -rcp -caus.soc -inf / EN: 'to.get.divorced' 
                                                                 # ohokavakaaja / o- =hok -av -ak -a -ah -a / 3n.m.s- =to.leave -rcp -caus.soc -ep -regr -real / EN: 'they.got.separated', ES: 'se.han.separado (pareja)'  
                                                   | [REV] # =pai-ry-aantsi 'to.say.someone's.name'
                                                   | [FRUS] # 
                                                   | [DEGR] # ipiroaantsi / =ir -piro -aantsi / =to.drink -degr -inf / EN: 'to.drink.well'
                                                   | [SENSORY] # kisanintantzinkari / =kis -a -nint -antzinkari 
                                                  ] )
                                                  # konatsapiyarentsi / =kona -tsapiya -re -ntsi / =to.fish.with.barbasco -cl:side.of.river -nmz -nposs / EN: 'activity.of.fishing.with.barbasco.at.the.bank.of.the.river', ES: 'pesca.nocturna.con.barbasco.a.orillas.del.río'  
                                                  [ V=S=CL|[V=S=CL [NMZ|V=S=ADJ]]|[NMZ|V=S=ADJ] ] (NRootCmpPRQ) 
                                                  (NSuff) ] .o. Lenition .o. NounFeatRestr .o. Epenthesis ; # .o. VowelLoss ;
      
      define CompositeVerbRoot [ (V=S=noun) ("@PHONPROCCMPNOUN@"V=S=LEN=noun) [[(N=S=CL)]|[(N=S=ABS)]] ] ;
      
      ############################
      #      Verb transducer     #
      ############################
      define Verb [ (Pref) [VRootPRQ] (Suff) ] .o. CausativeAgentive .o. Epenthesis .o. Lenition .o. VerbFeatRestr;
      #define Verb [ (Pref) [VRootPRQ] (Suff) ] .o. CausativeAgentive .o. Lenition .o. VerbFeatRestr;
      
      ##########################
      #                        #
      #         Adverb         #
      #                        #
      ##########################
      source advroot.prq.foma
        define AdvRootPRQ AdvRootPRQin;
      define Adverb [ [AdvRootPRQ] ];

      ##########################
      #                        #
      #          Other         #
      #                        #
      ##########################
      source oroot.prq.foma
        define ORootPRQ ORootPRQin;

      define Other [ [ORootPRQ] ];

      define ConnRootPRQ01 [ [ConnRootPRQ01in] [(V=S=OPT)] ];

      ##########################
      #                        #
      #        Negator         #
      #                        #
      ##########################
      source neg.prq.foma
        define NegPRQ NegPRQin;
      define Negator [ [NegPRQ] ];

      ##########################
      #                        #
      # Interrogative Pronoun  #
      #                        #
      ##########################
      source interrogative.prq.foma
        define WhPRQ WhPRQin;
      define Interrogative [ [WhPRQ] ];

      ##########################
      #                        #
      #    Personal Pronoun    #
      #                        #
      ##########################
      source prnpers.prq.foma
        define PrnPersPRQ PrnPersPRQin;
      define Personal [ [PrnPersPRQ] [(N=S=EMPH)|(N=S=PL)|(V=S=COND)] ];

      #################################
      #                               #
      #    Free Possessive Pronoun    #
      #                               #
      #################################
      source prnposs.prq.foma
        define PrnPossPRQ PrnPossPRQin;
      define Possessive [ [PrnPossPRQ] ];

      ###############################
      #                             #
      #    Demonstrative Pronoun    #
      #                             #
      ###############################
      source prndem.prq.foma
        define PrnDemPRQ PrnDemPRQin;
      define Demonstrative [ [PrnDemPRQ] [(N=S=PL)] ];

      ##########################
      #                        #
      #       Interjection     #
      #                        #
      ##########################
      source interjection.prq.foma
        define InterjPRQ InterjPRQin;
      define Interjection [ [InterjPRQ] ];

      ##########################
      #                        #
      #       Ideophones       #
      #                        #
      ##########################
      source ideo.prq.foma
        define IdeoPRQ IdeoPRQin;
      define Ideophone [ [IdeoPRQ] ];

      ##########################
      #                        #
      #       Punctuation      #
      #                        #
      ##########################
      source punctuation.foma
        define PunctuationMarks Punctuation;
      define Ashaninka Cleanup .o. [ [Other|Adverb|Noun|Verb|Negator|Interrogative|Personal|Possessive|Demonstrative|Interjection|Ideophone|NominalizedVerb|ConnRootPRQ01|PunctuationMarks] ] .o. Cleanup1 .o. Orthography .o. UpperCase;
      read regex Ashaninka;

      save stack asheninka.bin

