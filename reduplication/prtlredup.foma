define Vow [a|aa|e|i|ii|o];
define Diphthong [ai];
define Cons [{p}|{py}|{t}|{ty}|{k}|{ky}|{s}|{sh}|{ch}|{ts}|{tz}|{h}|{m}|{n}|{ny}|{r}|{ry}|{v}|{y}];
define EP [
  "[--][-a][+EP]" : {a} 
| "[--][-aa][+EP]" : {aa} 
];

define Redup %< \[%<|%>]+ %> ;

define Lexicon [
  "amen": [{a}(Redup){men}]
| "apii": [{a}(Redup){pii}]
| "ashi": [{a}(Redup){shi}]
| "atsik": [{a}(Redup){tsik}]
| "chek": [(Redup){chek}]
| "kaim" : [(Redup){kaim}]
| "kimota" : [(Redup){kimota}]
| "ken" : [(Redup){ken}]
| "kinkitsa" : [(Redup){kinkitsa}]
| "koma": [(Redup){koma}]
| "kov" : [(Redup){kov}]
| "mairi" : [(Redup){mairi}]
| "saik" : [(Redup){saik}]
| "sankena" : [(Redup){sankena}]
| "sampi" : [(Redup){sampi}]
| "tasonk" : [(Redup){tasonk}]
| "tsaanki" : [(Redup){tsaanki}]
];

define LexiconManual [
  "amen": [{a}(Redup)%<{me}%>{n}]
| "apii": [{a}(Redup)%<{pii}%>]
| "ashi": [{a}(Redup)%<{shi}%>]
| "atsik": [{a}(Redup)%<{tsi}%>{k}]
| "chek": [(Redup)%<{che}%>{k}]
| "kaim" : [(Redup)%<{kai}%>{m}]
| "kimota" : [(Redup)%<{ki}%>{mota}]
| "ken" : [(Redup)%<{ke}%>{n}]
| "kinkitsa" : [(Redup)%<{ki}%>{nkitsa}]
| "koma": [(Redup)%<{ko}%>{ma}]
| "kov" : [(Redup)%<{ko}%>{v}]
| "mairi" : [(Redup)%<{mai}%>{ri}]
| "saik" : [(Redup)%<{sai}%>{k}]
| "sankena" : [(Redup)%<{sa}%>{nkena}]
| "sampi" : [(Redup)%<{sa}%>{mpi}]
| "tasonk" : [(Redup)%<{ta}%>{sonk}]
| "tsaanki" : [(Redup)%<{tsaa}%>{nki}]
];

#define Rule1  ["Redup+"] -> %< ... %> ;
define MarkRedup [ Cons [Vow|Diphthong] ] -> %< ... %> || %> _ ;
define RemoveBrackets %<|%> -> 0;

define LLexicon Lexicon .o. MarkRedup; 
#define preRedup lexicon .o. Rule1 .o. MarkRedup; 
regex _eq(LLexicon, %<, %>) .o. RemoveBrackets; 
