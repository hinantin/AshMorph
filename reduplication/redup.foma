define Vow [a|e|i|o];
define Cons [{p}|{py}|{t}|{ty}|{k}|{ky}|{s}|{sh}|{ch}|{ts}|{tz}|{h}|{m}|{n}|{ny}|{r}|{ry}|{v}|{y}];
define EP [
  "[--][-a][+EP]" : {a} 
| "[--][-aa][+EP]" : {aa} 
];

define LexiconClass1 [
  "[=koma+tot.redup@unb.copy.+class1][VRoot][=to.row; to.paddle (ES: remar)]::[= (ES: remar.a_cada_rato)]":{koma}
| "[=kya+tot.redup@unb.copy.+class1][VRoot][=to.carry.load (on.the.back.holding.it.with.a.large.lace.on.the.forehead)]":{kya}
]; 

define LexiconClass2 [
  "[=mi+tot.redup@unb.copy.][VRoot][=to.jump (ES: saltar)]::[=to.jump.up-and-down]" : {mi} ! miamia
| "[=my+tot.redup@unb.copy.][VRoot][=to.jump (ES: saltar)]::[=to.jump.up-and-down]" : {my} ! myaamyaa
| "[=ny+INF@aantsi:agaantsi.+tot.redup@unb.copy.][VRoot][=to.see (ES: ver), to.look.for; to.visit]" : {ny}
| "[=p+INF@aantsi.+tot.redup@unb.copy.][VRoot][=to.give (ES: dar); to.feed (ES: alimentar)]" : {p}
]; 

define Lexicon [ LexiconClass2 EP ]; 
define Rule1 [ Cons ([ Vow | Cons ]*) ] -> %< ... %> || .#. _ .#. ;
define Rule2 [..] -> %< \[%<|%>]+ %> || .#. _ %< ;
define RemoveBrackets %<|%> -> 0;

define preRedup Lexicon .o. Rule1 .o. Rule2 ; 
regex _eq(preRedup, %<, %>) .o. RemoveBrackets;

